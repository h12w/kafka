package proto

import (
	"encoding/json"
	"fmt"
	"testing"

	"h12.io/wipro"
)

func TestUnmarshal(t *testing.T) {
	t.Parallel()
	r := wipro.Reader{
		B: []byte{0x0, 0x0, 0x1, 0x7a, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x74, 0x65, 0x73, 0x74, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x1, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2d, 0x9, 0xf8, 0xf8, 0x91, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x32, 0x30, 0x31, 0x35, 0x2d, 0x30, 0x39, 0x2d, 0x31, 0x35, 0x54, 0x32, 0x32, 0x3a, 0x31, 0x38, 0x3a, 0x30, 0x31, 0x2b, 0x30, 0x38, 0x3a, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x2d, 0x5b, 0xc0, 0xd7, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x32, 0x30, 0x31, 0x35, 0x2d, 0x30, 0x39, 0x2d, 0x31, 0x35, 0x54, 0x32, 0x32, 0x3a, 0x31, 0x38, 0x3a, 0x30, 0x34, 0x2b, 0x30, 0x38, 0x3a, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x2d, 0xfd, 0xb7, 0xdc, 0x82, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x32, 0x30, 0x31, 0x35, 0x2d, 0x30, 0x39, 0x2d, 0x31, 0x35, 0x54, 0x32, 0x32, 0x3a, 0x31, 0x38, 0x3a, 0x30, 0x35, 0x2b, 0x30, 0x38, 0x3a, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x2d, 0xe7, 0x6f, 0xfd, 0x41, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x32, 0x30, 0x31, 0x35, 0x2d, 0x30, 0x39, 0x2d, 0x31, 0x35, 0x54, 0x32, 0x32, 0x3a, 0x31, 0x38, 0x3a, 0x35, 0x30, 0x2b, 0x30, 0x38, 0x3a, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x2d, 0x41, 0x18, 0xf6, 0xf5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x32, 0x30, 0x31, 0x35, 0x2d, 0x30, 0x39, 0x2d, 0x31, 0x35, 0x54, 0x32, 0x32, 0x3a, 0x31, 0x38, 0x3a, 0x35, 0x31, 0x2b, 0x30, 0x38, 0x3a, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x2d, 0x13, 0x20, 0xd9, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x32, 0x30, 0x31, 0x35, 0x2d, 0x30, 0x39, 0x2d, 0x31, 0x35, 0x54, 0x32, 0x32, 0x3a, 0x31, 0x38, 0x3a, 0x35, 0x34, 0x2b, 0x30, 0x38, 0x3a, 0x30, 0x30},
	}
	messageCount := 6
	{
		resp := FetchResponse{}
		(&RequestOrResponse{M: &Response{ResponseMessage: &resp}}).Unmarshal(&r)
		if r.Err != nil {
			t.Fatal(r.Err)
		}
		if len(resp) != 1 ||
			len(resp[0].FetchMessageSetInPartitions) != 1 ||
			len(resp[0].FetchMessageSetInPartitions[0].MessageSet) != messageCount {
			t.Fatal("fail to parse truncated message set")
		}
	}
	{
		r.Reset()
		size := r.ReadInt32()
		size -= 2
		r.B = r.B[:size+4]
		(&wipro.Writer{B: r.B}).SetInt32(0, size)
		r.Reset()
		messageCount--

		resp := FetchResponse{}
		(&RequestOrResponse{M: &Response{ResponseMessage: &resp}}).Unmarshal(&r)
		if r.Err != nil {
			t.Fatal(r.Err)
		}
		if len(resp) != 1 ||
			len(resp[0].FetchMessageSetInPartitions) != 1 ||
			len(resp[0].FetchMessageSetInPartitions[0].MessageSet) != 5 {
			t.Fatal("fail to parse truncated message set")
		}
	}
}

func TestSnappyProduceRequest(t *testing.T) {
	r := wipro.Reader{
		B: []byte{0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x00, 0x01, 0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x31, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xb9, 0xa5, 0xb2, 0xea, 0x00, 0x02, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x31, 0x50, 0x00, 0x00, 0x19, 0x01, 0x64, 0x19, 0x5a, 0x0b, 0x91, 0xa8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x0b, 0x2d, 0x2d, 0x2d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2d, 0x2d, 0x2d, 0x19, 0x24, 0x14, 0x00, 0x1f, 0x18, 0x8c, 0x9b, 0x8d, 0x15, 0x25, 0x04, 0x11, 0x78, 0x3e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x74, 0xef, 0x27, 0xd6, 0x00, 0x02, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x2e, 0x42, 0x00, 0x00, 0x19, 0x01, 0x3c, 0x13, 0x50, 0x6e, 0x03, 0xa6, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x05, 0x63, 0x01, 0x01, 0x19, 0x1e, 0x14, 0x00, 0x17, 0x30, 0xb5, 0x42, 0x70, 0x15, 0x1f, 0x24, 0x09, 0x2d, 0x2d, 0x2d, 0x65, 0x6e, 0x64, 0x2d, 0x2d, 0x2d},
	}
	req := ProduceRequest{}
	(&RequestOrResponse{M: &Request{RequestMessage: &req}}).Unmarshal(&r)
	if r.Err != nil {
		t.Fatal(r.Err)
	}
	fmt.Println(toJSON(req))
}

func TestMarshalCompressed(t *testing.T) {
	r := wipro.Reader{
		B: []byte{0x0, 0x0, 0x4, 0x19, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x11, 0x6d, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x42, 0x4e, 0x36, 0x0, 0x0, 0x3, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x4, 0x42, 0x4e, 0x1f, 0x0, 0x0, 0x2, 0x61, 0xd2, 0x41, 0xdb, 0xf8, 0x0, 0x2, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x2, 0x53, 0x82, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x2, 0x3f, 0xb0, 0x5, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x4, 0x42, 0x4e, 0x1f, 0x0, 0x0, 0x2, 0xa4, 0x74, 0xcf, 0xb, 0x92, 0x1, 0x10, 0xf0, 0x4c, 0x0, 0x24, 0x35, 0x61, 0x63, 0x63, 0x38, 0x34, 0x65, 0x63, 0x2d, 0x35, 0x35, 0x39, 0x30, 0x2d, 0x34, 0x39, 0x34, 0x61, 0x2d, 0x36, 0x36, 0x33, 0x35, 0x2d, 0x37, 0x61, 0x35, 0x39, 0x64, 0x66, 0x35, 0x34, 0x35, 0x39, 0x33, 0x64, 0x0, 0x0, 0x2, 0x72, 0x7b, 0x22, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x22, 0x3a, 0x22, 0x31, 0x30, 0x31, 0x2e, 0x39, 0x30, 0x2e, 0x31, 0x32, 0x34, 0x2e, 0x35, 0x22, 0x2c, 0x22, 0x75, 0x75, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x8e, 0x4b, 0x0, 0xc0, 0x22, 0x2c, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x22, 0x7b, 0x5c, 0x22, 0x73, 0x69, 0x74, 0x65, 0x5c, 0x22, 0x3a, 0x7b, 0x5c, 0x22, 0x69, 0x64, 0x5c, 0x22, 0x3a, 0x5c, 0x22, 0x6d, 0x39, 0x78, 0x61, 0x48, 0x38, 0x66, 0x58, 0x5c, 0x22, 0x7d, 0x2c, 0x5c, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x11, 0x21, 0x4, 0x6f, 0x73, 0x11, 0x2a, 0x4, 0x66, 0x61, 0x5, 0x2c, 0x90, 0x38, 0x43, 0x35, 0x42, 0x44, 0x35, 0x41, 0x32, 0x2d, 0x35, 0x37, 0x42, 0x45, 0x2d, 0x34, 0x35, 0x32, 0x39, 0x2d, 0x38, 0x35, 0x35, 0x30, 0x2d, 0x35, 0x30, 0x38, 0x34, 0x30, 0x33, 0x31, 0x37, 0x38, 0x37, 0x46, 0x32, 0x5c, 0x5, 0x48, 0x4, 0x69, 0x70, 0x5, 0x31, 0x2e, 0xb5, 0x0, 0x14, 0x5c, 0x22, 0x2c, 0x5c, 0x22, 0x75, 0x9, 0x49, 0x60, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x69, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x3b, 0x20, 0x43, 0x50, 0x55, 0x20, 0x9, 0xc, 0x3c, 0x20, 0x4f, 0x53, 0x20, 0x39, 0x5f, 0x32, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x4d, 0x61, 0x63, 0x1, 0x10, 0x78, 0x58, 0x29, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x69, 0x74, 0x2f, 0x36, 0x30, 0x31, 0x2e, 0x31, 0x2e, 0x34, 0x36, 0x20, 0x28, 0x4b, 0x48, 0x54, 0x4d, 0x4c, 0x2c, 0x9, 0x2c, 0x44, 0x47, 0x65, 0x63, 0x6b, 0x6f, 0x29, 0x20, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2f, 0x31, 0x33, 0x43, 0x37, 0x9, 0x77, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x1, 0xd7, 0x2c, 0x5c, 0x22, 0x7a, 0x68, 0x2d, 0x48, 0x61, 0x6e, 0x73, 0x2d, 0x43, 0x4e, 0x5, 0x91, 0xc, 0x63, 0x74, 0x79, 0x70, 0x9, 0x19, 0x2c, 0xe7, 0xa7, 0xbb, 0xe5, 0x8a, 0xa8, 0xe7, 0xbd, 0x91, 0xe7, 0xbb, 0x9c, 0x5, 0x1b, 0x2c, 0x6f, 0x74, 0x5c, 0x22, 0x3a, 0x31, 0x2c, 0x5c, 0x22, 0x67, 0x65, 0x6f, 0x29, 0x9, 0x4, 0x6c, 0x61, 0x1, 0x13, 0x20, 0x30, 0x2c, 0x5c, 0x22, 0x6c, 0x6e, 0x67, 0x5c, 0x22, 0x5, 0xa, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5, 0xef, 0xd, 0x54, 0x14, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5, 0x12, 0x3c, 0x41, 0x53, 0x5c, 0x22, 0x7d, 0x7d, 0x2c, 0x5c, 0x22, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x9, 0x18, 0x18, 0x5b, 0x7b, 0x5c, 0x22, 0x61, 0x64, 0x73, 0xd, 0x5f, 0x10, 0x61, 0x64, 0x73, 0x69, 0x7a, 0x1, 0x84, 0x1, 0x59, 0xc, 0x73, 0x6c, 0x6f, 0x74, 0x25, 0x9a, 0x8, 0x31, 0x7d, 0x5d, 0x25, 0x90, 0x4, 0x62, 0x75, 0x1, 0x6a, 0x1c, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x7d, 0x22, 0x2c, 0x25, 0xc0, 0xa8, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x35, 0x36, 0x36, 0x30, 0x31, 0x36, 0x62, 0x63, 0x65, 0x32, 0x66, 0x63, 0x31, 0x63, 0x62, 0x39, 0x35, 0x61, 0x38, 0x62, 0x34, 0x35, 0x36, 0x37, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x3a, 0x31, 0x15, 0xd, 0x94, 0x5f, 0x61, 0x74, 0x22, 0x3a, 0x22, 0x32, 0x30, 0x31, 0x35, 0x2d, 0x31, 0x32, 0x2d, 0x32, 0x33, 0x54, 0x31, 0x30, 0x3a, 0x31, 0x38, 0x3a, 0x31, 0x35, 0x2e, 0x30, 0x39, 0x33, 0x37, 0x38, 0x34, 0x31, 0x38, 0x36, 0x5a, 0x22, 0x7d, 0x0, 0x0, 0x0, 0x0, 0x4, 0x42, 0x4e, 0x20, 0x0, 0x0, 0x2, 0x3, 0x2c, 0x5c, 0x52, 0xda, 0x0, 0x2, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x1, 0xf5, 0x82, 0x53, 0x4e, 0x41, 0x50, 0x50, 0x59, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0xe1, 0xb2, 0x4, 0x3c, 0x0, 0x0, 0x0, 0x0, 0x4, 0x42, 0x4e, 0x20, 0x0, 0x0, 0x2, 0x26, 0xc9, 0x1c, 0x1e, 0x59, 0x1, 0x10, 0xf0, 0x50, 0x0, 0x24, 0x64, 0x34, 0x33, 0x31, 0x38, 0x38, 0x66, 0x37, 0x2d, 0x64, 0x32, 0x34, 0x34, 0x2d, 0x34, 0x38, 0x35, 0x62, 0x2d, 0x35, 0x38, 0x34, 0x36, 0x2d, 0x62, 0x35, 0x62, 0x39, 0x34, 0x66, 0x30, 0x36, 0x30, 0x66, 0x38, 0x62, 0x0, 0x0, 0x1, 0xf4, 0x7b, 0x22, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x69, 0x70, 0x22, 0x3a, 0x22, 0x31, 0x39, 0x35, 0x2e, 0x31, 0x35, 0x34, 0x2e, 0x31, 0x35, 0x37, 0x2e, 0x31, 0x33, 0x34, 0x22, 0x2c, 0x22, 0x75, 0x75, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x64, 0x8a, 0x4e, 0x0, 0xc8, 0x22, 0x2c, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x22, 0x7b, 0x5c, 0x22, 0x73, 0x69, 0x74, 0x65, 0x5c, 0x22, 0x3a, 0x7b, 0x5c, 0x22, 0x69, 0x64, 0x5c, 0x22, 0x3a, 0x5c, 0x22, 0x37, 0x78, 0x46, 0x43, 0x56, 0x31, 0x70, 0x47, 0x67, 0x4a, 0x5c, 0x22, 0x7d, 0x2c, 0x5c, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x11, 0x23, 0x0, 0x70, 0x5, 0x23, 0x48, 0x35, 0x2e, 0x31, 0x34, 0x34, 0x2e, 0x39, 0x36, 0x2e, 0x32, 0x33, 0x33, 0x5c, 0x22, 0x2c, 0x5c, 0x22, 0x75, 0x61, 0x5, 0x18, 0xc8, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x20, 0x35, 0x2e, 0x31, 0x2e, 0x31, 0x3b, 0x20, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x3b, 0x20, 0x72, 0x76, 0x3a, 0x34, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x47, 0x65, 0x63, 0x6b, 0x6f, 0x2f, 0x1, 0xc, 0x20, 0x20, 0x46, 0x69, 0x72, 0x65, 0x66, 0x6f, 0x78, 0x2f, 0x1, 0xd, 0x5, 0x50, 0xc, 0x63, 0x74, 0x79, 0x70, 0x1, 0x73, 0x14, 0x5c, 0x22, 0x77, 0x69, 0x66, 0x69, 0x5, 0x13, 0x8, 0x67, 0x65, 0x6f, 0x9, 0xa7, 0x30, 0x6c, 0x61, 0x74, 0x5c, 0x22, 0x3a, 0x30, 0x2c, 0x5c, 0x22, 0x6c, 0x6e, 0x67, 0xd, 0xa, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5, 0x85, 0x4, 0x52, 0x55, 0x5, 0x30, 0x14, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5, 0x12, 0x3c, 0x45, 0x55, 0x5c, 0x22, 0x7d, 0x7d, 0x2c, 0x5c, 0x22, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73},
	}
	resp := FetchResponse{}
	(&RequestOrResponse{M: &Response{ResponseMessage: &resp}}).Unmarshal(&r)
	if r.Err != nil {
		t.Fatal(r.Err)
	}
	if len(resp) != 1 ||
		len(resp[0].FetchMessageSetInPartitions) != 1 ||
		len(resp[0].FetchMessageSetInPartitions[0].MessageSet) != 1 {
		t.Fatal("fail to parse message set")
	}
	ms, err := resp[0].FetchMessageSetInPartitions[0].MessageSet[0].SizedMessage.CRCMessage.Message.Decompress()
	if err != nil {
		t.Fatal(err)
	}
	if len(ms) != 1 ||
		len(ms[0].SizedMessage.CRCMessage.Message.Value) == 0 {
		t.Fatal("fail to decompress message set")
	}
}

func toJSON(v interface{}) string {
	buf, _ := json.MarshalIndent(v, "", "    ")
	return string(buf)
}

func p(v ...interface{}) {
	fmt.Println(v...)
}
